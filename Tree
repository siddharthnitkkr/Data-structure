/******************************************************************************

                            Online C Compiler.
                Code, Compile, Run and Debug C program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <stdio.h>
#include<stdlib.h>
#include<queue>
using namespace std;
struct node
{
    
    int data;
    struct node *left,*right;
};

struct node *root;

void insert(int data)
{
    
    struct node *p,*t;
    p=(struct node*)malloc(sizeof(struct node));
    p->data=data;
    p->left=NULL;
    p->right=NULL;
    
    if(root==NULL)
       root=p;
    else
    {
        t=root;
        while(t)
        {
            if(data < t->data)
            {
                if(t->left==NULL)
                  { t->left=p;
                    break;
                  }
                  
                  t=t->left;
                
                
            }
            else if(data > t->data)
            {
                if(t->right==NULL)
                  { 
                      t->right=p;
                    break;
                  }
                
                 t=t->right;
                 
            }
            else
              break;
        }
    }
    
    
}

void preorder(struct node *rot)
{
    if(rot)
    {
        printf("%d ",rot->data);
        preorder(rot->left);
        preorder(rot->right);
    }
    
    
}

void inorder(struct node *root)
{ 

    if(root)
    {
        inorder(root->left);
        printf("%d ",root->data);
        inorder(root->right);
    }
    
}

void postorder(struct node *root)
{
      if(root)
      {
          postorder(root->left);
          postorder(root->right);
          printf("%d ",root->data);
      }
}

void levelordertraversal(struct node *root)
{
    struct node *temp;
     queue<struct node *> q ;
     if(root==NULL)
        return ;
      else
      {
          q.push(root);
          while(!q.empty())
          {
              temp=q.front();
                   q.pop();
            printf("%d ",temp->data);
            if(temp->left)
            {
                 q.push(temp->left);
            }
              
            if(temp->right)
            {
                q.push(temp->right);
            }
              
              
          }
          
          
          
          
      }
    
    
    
    
}

int main()
{
   insert(3);
   insert(1);
   insert(2);
   insert(4);
   printf("\npreorder is \n");
   preorder(root);
   printf("\npostorder is \n");
   postorder(root);
   printf("\ninorder is \n");
   inorder(root);
   printf("\nlevel order traversal\n");
   levelordertraversal(root);
   
    return 0;
}
